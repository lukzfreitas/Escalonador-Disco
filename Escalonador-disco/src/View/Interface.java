/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.CLOOK;
import model.CSCAN;
import model.FCFS;
import model.LOOK;
import model.SCAN;
import model.SSTF;

/**
 *
 * @author 13111549
 */
public class Interface extends javax.swing.JFrame {

    private int numCilindro;
    private int initCilindro;
    private int[] referenceString;
    private CLOOK clook;
    private LOOK look;
    private CSCAN cscan;
    private SCAN scan;
    private FCFS fcfs;
    private SSTF sstf;
    private static final String FILENAMECLOOK = "CLOOK.png";
    private static final String FILENAMELOOK = "LOOK.png";
    private static final String FILENAMECSCAN = "CSCAN.png";
    private static final String FILENAMESCAN = "SCAN.png";
    private static final String FILENAMEFCFS = "FSFC.png";
    private static final String FILENAMESSTF = "SSTF.png";
    private boolean arquivoCarregado = false;
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
        FCFS.setEnabled(arquivoCarregado);
        SSTF.setEnabled(arquivoCarregado);
        CLOOK.setEnabled(arquivoCarregado);
        LOOK.setEnabled(arquivoCarregado);
        SCAN.setEnabled(arquivoCarregado);
        CSCAN.setEnabled(arquivoCarregado);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nomeArquivoTextField = new javax.swing.JTextField();
        FCFS = new javax.swing.JButton();
        SSTF = new javax.swing.JButton();
        SCAN = new javax.swing.JButton();
        CSCAN = new javax.swing.JButton();
        LOOK = new javax.swing.JButton();
        CLOOK = new javax.swing.JButton();
        Passo1 = new javax.swing.JLabel();
        Passo2 = new javax.swing.JLabel();
        EnviarArquivo = new javax.swing.JButton();
        NomeArquivoText = new javax.swing.JLabel();
        QuantMovCab = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableMovCab = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nomeArquivoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeArquivoTextFieldActionPerformed(evt);
            }
        });

        FCFS.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        FCFS.setText("FCFS");
        FCFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FCFSActionPerformed(evt);
            }
        });

        SSTF.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        SSTF.setText("SSTF");
        SSTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSTFActionPerformed(evt);
            }
        });

        SCAN.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        SCAN.setText("SCAN");
        SCAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SCANActionPerformed(evt);
            }
        });

        CSCAN.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        CSCAN.setText("C-SCAN");
        CSCAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CSCANActionPerformed(evt);
            }
        });

        LOOK.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LOOK.setText("LOOK");
        LOOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LOOKActionPerformed(evt);
            }
        });

        CLOOK.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        CLOOK.setText("C-LOOK");
        CLOOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLOOKActionPerformed(evt);
            }
        });

        Passo1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Passo1.setText("Passo 1: Escolha o Arquivo");

        Passo2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Passo2.setText("Passo 2: Esolha um Algoritmo de Escalonamento");

        EnviarArquivo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        EnviarArquivo.setText("Enviar Arquivo");
        EnviarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarArquivoActionPerformed(evt);
            }
        });

        NomeArquivoText.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NomeArquivoText.setText("Nome do Arquivo:");

        QuantMovCab.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        QuantMovCab.setText("Quantidade de Movimentos do Cabe√ßote");

        TableMovCab.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TableMovCab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "FCFS", "SSTF", "SCAN", "C-SCAN", "LOOK", "C-LOOK"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableMovCab.setGridColor(new java.awt.Color(102, 102, 102));
        TableMovCab.setName(""); // NOI18N
        jScrollPane1.setViewportView(TableMovCab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Passo1)
                            .addComponent(Passo2)
                            .addComponent(QuantMovCab)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(NomeArquivoText)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nomeArquivoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EnviarArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(FCFS, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(SSTF, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(SCAN, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CSCAN, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LOOK, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CLOOK, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(Passo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeArquivoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EnviarArquivo)
                    .addComponent(NomeArquivoText))
                .addGap(33, 33, 33)
                .addComponent(Passo2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FCFS)
                    .addComponent(SSTF)
                    .addComponent(SCAN)
                    .addComponent(CSCAN)
                    .addComponent(LOOK)
                    .addComponent(CLOOK))
                .addGap(44, 44, 44)
                .addComponent(QuantMovCab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nomeArquivoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeArquivoTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeArquivoTextFieldActionPerformed

    private void EnviarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarArquivoActionPerformed
        int tempo = 1000;
        ArrayList<Integer> list = lerArquivo(nomeArquivoTextField.getText());
        for (Integer valor : list) {
            if (valor > numCilindro - 1 || valor < 0) {
                JOptionPane.showMessageDialog(null,
                        "Valor n√£o encontrado dentro do intervalo do cilindro!",
                        "Erro",
                        JOptionPane.ERROR_MESSAGE);
                list.clear();
                break;
            }
        }
        if (!list.isEmpty()) {
            referenceString = new int[list.size()];
            for (int i = 0; i < list.size(); i++) {
                referenceString[i] = list.get(i);                
            }
            try {
                fcfs = new FCFS(referenceString, numCilindro, initCilindro);
                Thread.sleep(tempo);
                sstf = new SSTF(referenceString, numCilindro, initCilindro);
                Thread.sleep(tempo);
                scan = new SCAN(referenceString, numCilindro, initCilindro);
                Thread.sleep(tempo);
                cscan = new CSCAN(referenceString, numCilindro, initCilindro);
                Thread.sleep(tempo);
                look = new LOOK(referenceString, numCilindro, initCilindro);
                Thread.sleep(tempo);
                clook = new CLOOK(referenceString, numCilindro, initCilindro);

                TableMovCab.setValueAt(fcfs.serviceRequests(), 0, 0);
                TableMovCab.setValueAt(sstf.serviceRequests(), 0, 1);
                TableMovCab.setValueAt(scan.serviceRequests(), 0, 2);
                TableMovCab.setValueAt(cscan.serviceRequests(), 0, 3);
                TableMovCab.setValueAt(look.serviceRequests(), 0, 4);
                TableMovCab.setValueAt(clook.serviceRequests(), 0, 5);

                fcfs.printGraph(FILENAMEFCFS);
                Thread.sleep(tempo);
                sstf.printGraph(FILENAMESSTF);
                Thread.sleep(tempo);
                scan.printGraph(FILENAMESCAN);
                Thread.sleep(tempo);
                cscan.printGraph(FILENAMECSCAN);
                Thread.sleep(tempo);
                look.printGraph(FILENAMELOOK);
                Thread.sleep(tempo);
                clook.printGraph(FILENAMECLOOK);
                
                arquivoCarregado = true;
                FCFS.setEnabled(arquivoCarregado);
                SSTF.setEnabled(arquivoCarregado);
                CLOOK.setEnabled(arquivoCarregado);
                LOOK.setEnabled(arquivoCarregado);
                SCAN.setEnabled(arquivoCarregado);
                CSCAN.setEnabled(arquivoCarregado);
            } catch (Exception e) {
                System.out.println("Erro Thread Sleep");
            }
        }
    }//GEN-LAST:event_EnviarArquivoActionPerformed

    private void FCFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FCFSActionPerformed
        try {
            java.awt.Desktop.getDesktop().open(new File(FILENAMEFCFS));
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_FCFSActionPerformed

    private void SSTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSTFActionPerformed
        try {
            java.awt.Desktop.getDesktop().open(new File(FILENAMESSTF));
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SSTFActionPerformed

    private void SCANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SCANActionPerformed
        try {
            java.awt.Desktop.getDesktop().open(new File(FILENAMESCAN));
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SCANActionPerformed

    private void CSCANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CSCANActionPerformed
        try {
            java.awt.Desktop.getDesktop().open(new File(FILENAMECSCAN));
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CSCANActionPerformed

    private void LOOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOOKActionPerformed
        try {
            java.awt.Desktop.getDesktop().open(new File(FILENAMELOOK));
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LOOKActionPerformed

    private void CLOOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLOOKActionPerformed
        try {
            java.awt.Desktop.getDesktop().open(new File(FILENAMECLOOK));
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CLOOKActionPerformed

    private ArrayList<Integer> lerArquivo(String filename) {
        String valor = "";
        ArrayList<Integer> list = new ArrayList<>();
        try {
            BufferedReader br = new BufferedReader(new FileReader(filename));
            int i = 0;
            while (br.ready() && i < 3) {
                String linha = br.readLine();
                switch (i) {
                    case 0:
                        numCilindro = Integer.parseInt(linha);
                        break;
                    case 1:
                        initCilindro = Integer.parseInt(linha);
                        break;
                    case 2:
                        int count = 0;
                        for (int j = 0; j < linha.length(); j++) {
                            if (linha.charAt(j) != ' ') {
                                valor += linha.charAt(j);
                            } else {
                                list.add(Integer.parseInt(valor));
                                valor = "";
                                count++;

                            }
                            if (j == linha.length() - 1) {
                                if (linha.charAt(j) != ' ') {
                                    list.add(Integer.parseInt(valor));
                                    count++;
                                    valor = "";
                                }
                            }
                        }
                        break;
                    default:
                        return list;
                }
                i++;
            }
            br.close();
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null,
                    "Arquivo n√£o encontrado!",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
        return list;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLOOK;
    private javax.swing.JButton CSCAN;
    private javax.swing.JButton EnviarArquivo;
    private javax.swing.JButton FCFS;
    private javax.swing.JButton LOOK;
    private javax.swing.JLabel NomeArquivoText;
    private javax.swing.JLabel Passo1;
    private javax.swing.JLabel Passo2;
    private javax.swing.JLabel QuantMovCab;
    private javax.swing.JButton SCAN;
    private javax.swing.JButton SSTF;
    private javax.swing.JTable TableMovCab;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeArquivoTextField;
    // End of variables declaration//GEN-END:variables
}
